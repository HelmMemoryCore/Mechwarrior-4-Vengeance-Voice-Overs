
//*********************************************************************************

//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Turret must be changed to some other unique identifier
fsm turrets : integer;

// This is the generic script for turrets of all sorts.
// Memory integer 9 is reserved for settings in case multiple turret groups are using the same brain

// Behavior: The turret sits and shoots, and that's it.

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>


//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>


//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer		attackrange; // At what range will I attack someone?
	static integer		gunnery; 	// What is my chance to hit?
	static real				mindelay;		//minimum amount of time I will wait between shots
	static real				maxdelay;		//maximum amount of time I will wait between shots
	static integer 		elitelevel; // How smart am I?
																//Turrets do not use Elite Level to choose tactics.  However,
																//they do use Elite level to set up opportunity fire.
	static integer		isshotradius;  //how close must an enemy shot come to me before I notice it
	
	static ObjectID mytower; // Tower which controls this turret.
														// -1 means I have no control tower
	
//------------------------------------------------------------------
//
//     Init Function    (automatically run first time through)
//
//------------------------------------------------------------------
function init;

	code

															// defaults are below
	attackrange = 450;					//350
	gunnery = 50;							//30
	mindelay = 0.1;							//1.0
	maxdelay = 0.2;             //2.0
	elitelevel = 65;            //30
	mytower = -1;				       //-1	(-1 means I have no control tower)
	isshotradius = 25;				 //40
	
	
	//Use this to set different values for different units using the same brain
	switch (GetMemoryInteger(me,1))

		case 1:
		
		mytower = eve_tower1;
		attackrange = 350;				
 			
		endcase;
	endswitch;

endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,true);
		setisshotradius(me,isshotradius);
		setskilllevel(me,-1,gunnery,elitelevel);
		//startexecute(me);
		//setalignment(me,enemy);
		setsensorvisibility(me,false);
		trans look;

endstate;

state deadState;
	code
	turretshit = true;
	  orderDie;
endstate;

//------------------------------------------------------------------
//
//     Sit state : description
//
//------------------------------------------------------------------
state look;
	var

	code
	
		OrderMoveLookout;
		
		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state
		if (mytower <> -1) then
			if (IsDead(mytower)) then
				trans towergone;
			endif;
		endif;

		//Find me an enemy.
		//If the enemy is within my attackrange then attack it
		if (setmytarget(attackrange)) then
			setsensorvisibility(me,true);
			trans attack;
		endif;

		
endstate;

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
state attack;

	var
		ObjectID foe;
		boolean	check;

	code
	
		//Go back to the sit state if ANY of the following conditions apply
		
		if (LeaveAttackState(attackrange*2)) then
			orderstopattacking;
			SetTarget(ME,NO_UNIT);
			setsensorvisibility(me,false);
			trans look;
		endif;
		
		//Go ahead, shoot the target.  You know you want to.
		orderAttack(TRUE);
				
		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state when my tower is destroyed
		if (mytower <> -1) then
			if (IsDead(mytower)) then
				trans towergone;
			endif;
		endif;

endstate;

state towergone;

	code	

		//My tower is dead so I should stop attacking things.
		SetTarget(ME,NO_UNIT);
		OrderStopAttacking;
		SetTargetDesirability(ME,-1);
		setsensorvisibility(me,false);
		clearmoveorder(me);
		

	
endstate;


endfsm.
//******************************************************************


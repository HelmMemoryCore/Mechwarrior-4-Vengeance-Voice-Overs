
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm PatrolWander : integer;


//------------------------------------------------------------------

// Generic_Patrol:
//   Follows a path.  If anything comes near, it goes off and attacks it,
//   and then comes back to the path when there's nothing left to attack.

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			fleeRange;			// At what range do I start running?
		static integer			withdrawRange;		// After I've started to flee, at what range can I forget about my enemy and return to the convoy?
		static integer			attackRange;		// At what range do I start shooting?

		static integer			path;				// My path
		static integer			moveType;			// How I move along the path
		static boolean			canLeavePath;		// Can I leave the path if attacked? (TRUE by default)

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real					minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real					maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
		static integer			findTypes;			// What kind of enemies to look for

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.
		static integer			speed;				// The speed at which I move along the path
		static integer			fleespeed;		// How fast I run away!
    static LocPoint			fleespot;  // A point to which I will run away too

		

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		AttackRange	 		 	= 300;
		FleeRange					=	100;
		WithdrawRange			=	450;
		path				 			= epa_wander;
		moveType					= move_circle;
		canLeavePath			= true;
		speed							= 30;
		fleespeed 				= 80;

		// driver settings
		piloting					= 50;
		gunnery		 			 	= 30;
		minDelay	 				= 0.5;
		maxDelay					= 1.5;
		eliteLevel				= 30;
		attackThrottle		= 50;
		isShotRadius			= 120;
		attackSound				= -1; // no sound
		deathSound				= -1; // no sound
		mood							= NEUTRAL_START;
		findTypes					= FT_MECH;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay					(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire		(ME,true);
		SetIsShotRadius					(ME,isShotRadius);
		SetEntropyMood					(ME,mood);
		SetCurMood							(ME,mood);
		SetSkillLevel						(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle				(ME,attackThrottle);
		GetLocation							(ena_fleespot,fleespot);
trans FollowPathState;
		

endstate;			

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(attackRange,findTypes)) then
			trans AttackState;
		endif;

		OrderMoveResumePatrol(path,speed,moveType,true,true);

endstate;

//------------------------------------------------------------------
//	AttackState: attack my current target, or return to path if done
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

	   if (FindEnemy(fleeRange,FT_MECH)) then
			trans FleeState;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttack(canLeavePath);

endstate;
		
state FleeState;
	code
	
	
 	if (LeaveAttackState(withdrawRange)) then
			ClearMoveOrder(ME);
      trans FollowPathState;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

	 //OrderMoveToLocPoint(fleespot,fleespeed,true,true);
	  OrderMoveFlee(GetTarget(ME),fleeSpeed);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.


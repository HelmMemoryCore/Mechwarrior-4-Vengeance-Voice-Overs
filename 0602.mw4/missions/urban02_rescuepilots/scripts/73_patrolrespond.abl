
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm Patrolrespond : integer;


//------------------------------------------------------------------

// Generic_Patrol:
//   Follows a path.  If anything comes near, it goes off and attacks it,
//   and then comes back to the path when there's nothing left to attack.

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat entirely?

		static integer			path;				// My path
		static integer			moveType;			// How I move along the path
		static boolean			canLeavePath;		// Can I leave the path if attacked? (TRUE by default)

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
		static integer			findTypes;			// What kind of enemies to look for

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.
		static integer			speed;				// The speed at which I move along the path

		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
		static integer			mytactic;
		static integer			mytime;
		
		static boolean			byebye;
		static integer			wimpy;

		
//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 450;
		path			= -1;
		moveType		= move_circle;
		canLeavePath	= true;
		speed			= 600;
		takeOffDistance	= 150;
		mytactic = TACTIC_PICK_BEST;
		mytime = rand (10,75);

		// driver settings
		piloting		= 80;
		gunnery			= 92;
		minDelay		= 0.1;
		maxDelay		= 0.4;
		eliteLevel		= 87;
		attackThrottle	= 80;
		isShotRadius	= 70;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		findTypes		= FT_DEFAULT;
		byebye = false;
		wimpy = getdifficulty;

		
	switch (getmemoryinteger(me,9))

	case 1:
		path = epa_pathone;
		moveType		= move_seesaw;
		speed = 10;
		byebye = true;
 	endcase;
	
	case 2:
		path = epa_pathtwo;
		speed = 5;
		attackthrottle = 100;
		mytactic = TACTIC_REAR;
		byebye = true;
 	endcase;

	case 3:
		path = epa_paththree;
		speed = 15;
		attackthrottle = 100;
		mytime = rand (5,25);
 	endcase;

	case 4:
		path = epa_pathfour;
		moveType		= move_seesaw;
		speed = 20;
		attackrange = 350;
		mood = agressive_start;
 	endcase;

	case 5:
		path = epa_pathfive;
		speed = 25;
		mood = agressive_start;
 	endcase;

	case 6:
		path = epa_pathsix;
		speed = 30;
		mytactic = TACTIC_JOUST;
		attackthrottle = 100;
 	endcase;

	endswitch;
	
		withdrawRange	= attackrange * 2;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);
		
		if (byebye) then
			If (wimpy == EASY_DIFFICULTY) then
				shutdown(me);
				teleporttohell(me);
				selfdestruct(me);	
				trans limbo;
			endif;
		endif;


		if (orderTakeOff(takeOffDistance) == true) then
			trans FollowPathState;
		endif;

endstate;			

state limbo;
	code
	
endstate;


//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(attackRange,findTypes)) then
			if (iswithin(me,(gettarget(me)),withdrawrange))	then
				trans AttackState;
			endif;
		endif;

		if (path <> -1) then
			OrderMoveResumePatrol(path,speed,moveType,true,false);
		else
			OrderMoveLookOut;
		endif;
		
		if (foundgarage) then
			if(timegreater(gti_timer_5,mytime)) then
				clearmoveorder(me);
				trans gettogarage;
			endif;
		endif;
endstate;

state gettogarage;
	code
		if (FindEnemy(attackRange,findTypes)) then
			if (iswithin(me,(gettarget(me)),withdrawrange))	then
				trans AttackState;
			endif;
		endif;
		
		ordermovetoobject(navpoint,600);
		
	endstate;

//------------------------------------------------------------------
//	AttackState: attack my current target, or return to path if done
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			if (not foundgarage) then
				trans FollowPathState;
			else
				trans gettogarage;
			endif;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttackTactic(mytactic,canLeavePath);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.


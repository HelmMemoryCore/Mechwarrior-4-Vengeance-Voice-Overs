
//*********************************************************************************
//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Patrol must be changed to some other unique identifier
fsm RearAssault : integer;

//This unit patrols a specific path and attacks anything that comes near it.
//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer			attackrange; // When do I start shooting?
																
	static integer			piloting; 	// piloting skill
	static integer			gunnery; // hit chance,
	static real					mindelay;		//minimum amount of time I will wait between shots once a weapon is reloaded
	static real					maxdelay;		//maximum amount of time I will wait between shots once a weapon is reloaded
	static integer 			speed;			 // What speed so I move at?
	static integer 			elitelevel; // % elite chance, This helps determine tactics, defensive manuevers, opportunity fire
																	// and other things that would normally be determined by combat experience

 	static integer			isshotradius;	//how far away from me will I detect an enemy shot.
	static integer			movetype;		//how will it move down the path?

	static integer 			attacksound; // plays when it first attacks
	static integer 			deathsound; // plays when it dies
	
	static integer			mood;	//What is my normal mood?
	
	static integer			PathOne;		 //what path am I following?

	
	static Boolean 			derail;	// if FALSE, it won't leave the path, even when things
  // are shooting it. It will shoot back. Defaults to true
	
	static integer			Mystate;
	
	static objectid			buildingone;
	static objectid			buildingtwo;
	
	static integer			mynum;
	static integer			checknum;
	static boolean			lastcheck;
	static locpoint			endpoint;

		
//------------------------------------------------------------------
//
//     Local Functions
//
//------------------------------------------------------------------

function init;

	code
	
																					// defaults are below
	//These are the variables that are normally changed by the designer
  //in order to change behavior
	
	endpoint[0] = -987;
	endpoint[1] = 43;
	endpoint[2] = -1086;
	
	PathOne = epa_rearassault;
	Mystate = 0;
	buildingone = ebu_objectivebuilding1;
	buildingtwo =	ebu_objectivebuilding2;
	mynum = (GetMemoryInteger(me,9));	
		
	attackrange = 500;											// 500
	piloting = 65;														//50
	gunnery = 75;												//30
	mindelay = 0.1;													//1.5
	maxdelay = 0.4;													//3.0
	elitelevel = 75;												//30
	speed = 60;														//600 (max speed)	
	isshotradius = 80;												//80 	
	attacksound = -1;                   //-1 (no sound)
	deathsound = -1;                    //-1 (no sound)
	movetype = move_NoCycle;									//move_circle
	derail = true;					 //true
	mood = Agressive_start;								//neutral_start

	lastcheck = false;	
	
endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
	state startState;
	
		code
			
			SetFiringDelay(me,mindelay,maxdelay);
			setignorefriendlyfire(me,true);
			setisshotradius(me,isshotradius);
			setentropymood(me,mood);
			setcurmood(me,mood);
			setskilllevel(me,piloting,gunnery,elitelevel);
			//setsearchlight(me,on);
			//startexecute(me);
			setalignment(me,enemy);
					
			trans wait;
			
	endstate;			

	state deadState;
		code
			if (deathsound <> -1) then	
				PlaySoundOnce(deathsound);
			endif;		
							
			orderDie;
	endstate;
	
	//wait around for orders
	state wait;
		code
		
		
		if ((linkupobjectivedone) or (timegreater(gti_timer_0,800))) then
			mystate = 1;
			derail = false;
			trans tobase;
		endif;
	
		ordermovelookout;
		
		if (setmytarget(attackrange)) then
			trans attack;
	 	endif;

	
	endstate;

	//get to the pass
	state tobase;

		code

		mystate = 1;
		
		checknum = ((groupnumdead(groupobjectid(15)) + 1));
		
		if (mynum == checknum) then
			derail = true;
		endif;
			
			if (setmytarget(attackrange)) then
				if (mynum == checknum) then
					trans attack;
				else
					orderattack(derail);
				endif;
			endif;

		
		//if (orderformationmove((groupobjectid(40)),pathone,50,move_nocycle,1,FORMTYPE_SPARSE,true)) then
		if ((ordermoveto(pathone,70,move_nocycle,true,true)) or (hitem)) then
			clearmoveorder(me);
			mystate = 2;
			hitem = true;
			derail = true;
			trans buildingassault1;
		endif;
 				
	endstate;
	
	//destroy the buildings at the pass
	state buildingassault1;
		code
		
		mystate = 2;

		derail = true;
		
		if (setmytarget(attackrange)) then
			trans attack;
	 	endif;

		if (isdead(buildingone)) then
			settarget(me,buildingtwo);
			clearmoveorder(me);
			derail = true;
			trans attack;
		else
			settarget(me,buildingone);
			clearmoveorder(me);
			derail = true;
			trans attack;
		endif;
		
		ordermovelookout;

	endstate;
	


//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
	state Attack;
	
		code
		
			checknum = ((groupnumdead(groupobjectid(15)) + 1));
			
			if (mystate == 0) then
				if (linkupobjectivedone) then
					mystate = 1;
					orderstopattacking;
					derail = false;
					trans tobase;
				endif;
			endif;
		
			if (not hitem) then
				if (iswithinlocpoint(me,endpoint,125)) then
					hitem = true;
				endif;
			endif;
			
			if (not	lastcheck) then
				if (hitem) then
					derail = true;
					orderstopattacking;
					lastcheck = true;
					trans buildingassault1;
				endif;
			endif;
				
			if (LeaveAttackState(attackrange*2)) then
				orderstopattacking;
				
				switch mystate
				
				case 0:
					trans Wait;
				endcase;
				
				case 1:
					ordermoveresumepatrol(pathone,50,move_nocycle,true,true);
					trans tobase;
				endcase;
				
				case 2:
					trans buildingassault1;
				endcase;
				
				endswitch;
				
			endif;
					
			//the ever popular attack order
			orderAttack (derail);
			
			//maybe swap targets when I am shot.
			if ((isShot (me)) and (rand(0,75) <= 1)) then
				setTarget(me,whoShot(me));
			endif;

	endstate;

   endfsm.
//******************************************************************


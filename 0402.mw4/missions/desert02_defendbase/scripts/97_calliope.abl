
//*********************************************************************************

//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Turret must be changed to some other unique identifier
fsm Calliopes : integer;

// This is the generic script for turrets of all sorts.
// Memory integer 9 is reserved for settings in case multiple turret groups are using the same brain

// Behavior: The turret sits and shoots, and that's it.

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>


//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>


//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer		attackrange; // At what range will I attack someone?
	static integer		gunnery; 	// What is my chance to hit?
	static real				mindelay;		//minimum amount of time I will wait between shots
	static real				maxdelay;		//maximum amount of time I will wait between shots
	static integer 		elitelevel; // How smart am I?
																//Turrets do not use Elite Level to choose tactics.  However,
																//they do use Elite level to set up opportunity fire.
	static integer		isshotradius;  //how close must an enemy shot come to me before I notice it
	
	static ObjectID mytower; // Tower which controls this turret.
														// -1 means I have no control tower

	static integer			friendlyFireFrustrationLevel;
	static integer			frustration_timer;
	static integer			attack_player_timer;
	
//------------------------------------------------------------------
//
//     Init Function    (automatically run first time through)
//
//------------------------------------------------------------------
function init;

	code

															// defaults are below
	attackrange = 700;					//350
	gunnery = 250;							//30
	mindelay = 0.1;							//1.0
	maxdelay = 0.2;             //2.0
	elitelevel = 90;            //30
	mytower = -1;				       //-1	(-1 means I have no control tower)
	isshotradius = 40;				 //40

	friendlyFireFrustrationLevel	= 0;
	frustration_timer				= gti_Timer_23;
	attack_player_timer				= gti_Timer_24;
	
	
	//Use this to set different values for different units using the same brain
	switch (GetMemoryInteger(me,9))

		case 0:
		
		//attackrange = 350;	
		//gunnery = 30;					
		//mindelay = 1.0;			
		//maxdelay = 2.0;
		//elitelevel = 30;
		//mytower = -1;				
    //isshotradius = 40;				
		
		endcase;
		
	endswitch;

	StartTimer(frustration_timer);
	SetTimer(frustration_timer,100);

endfunction;

function CheckIfPlayerShotMe : integer;
	var
		ObjectID who_shot;

	code
		if (Not TimeGreater(frustration_timer,8)) then
			return (0);
		endif;
		
		if (Not IsShot(ME)) then
			return (0);
		endif;

		who_shot = WhoShot(me);

		if (who_shot <> getplayervehicle(epl_player0)) then
			return (0);
		endif;

		ResetTimer(frustration_timer);

		if (friendlyFireFrustrationLevel == 0) then
			PlaySound(eso_FFWarn1);
			friendlyFireFrustrationLevel = 1;
		else
			if (friendlyFireFrustrationLevel == 1) then
				PlaySound(eso_FFWarn2);
				friendlyFireFrustrationLevel = 2;
			else
				if (friendlyFireFrustrationLevel == 2) then
					PlaySound(eso_FFWarn1);
					friendlyFireFrustrationLevel = 3;
				else
					PlaySound(eso_FFWarn3);
					StartTimer(attack_player_timer);
					ResetTimer(attack_player_timer);
					trans KillPlayerState;
				endif;
			endif;
		endif;

		return (1);

endfunction;


//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		//SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,false);
		setisshotradius(me,isshotradius);
		setskilllevel(me,-1,gunnery,elitelevel);
		//startexecute(me);
		//setalignment(me,enemy);
	
		trans look;

endstate;

state deadState;
	code
	  orderDie;
endstate;

//------------------------------------------------------------------
//
//     Sit state : description
//
//------------------------------------------------------------------
state look;
	var
		ObjectID foe;

	code
		CheckIfPlayerShotMe;

		OrderMoveLookout; 	


		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state when my tower is destroyed
		//if (mytower <> -1) then
		//	if (IsDead(mytower)) then
		//		trans towergone;
		//	endif;
		//endif;

		//Find out if I should get into the attackstate
		if (iswithin(me,(groupobjectid(44)),1400)) then
			settarget(me,(groupobjectid(44)));
			trans attack;
	 	endif;

		
endstate;

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
state attack;

	code
		CheckIfPlayerShotMe;
			
		if (LeaveAttackState(attackrange)) then
			orderstopattacking;
			trans look;
		endif;
		
		//Go ahead, shoot the target.  You know you want to.
		orderAttack(TRUE);
				
		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state when my tower is destroyed
		//if (mytower <> -1) then
		//	if (IsDead(mytower)) then
		//		trans towergone;
		//	endif;
		//endif;

endstate;

//------------------------------------------------------------------
//	KillPlayerState: too much friendly fire -- get pissed and attack the player
//------------------------------------------------------------------

state KillPlayerState;
	code
		if (TimeGreater(attack_player_timer,6)) then
			SetFiringDelay			(ME,0.0,0.0);
			SetSkillLevel			(ME,100,500,100);

			SetAutoTargeting(ME,FALSE);
			SetTarget(ME,getplayervehicle(epl_player0));
			OrderAttack(TRUE);
		endif;
endstate;

state towergone;

	code	

		//My tower is dead so I should stop attacking things.
		OrderStopAttacking;
		
		//trans deadstate;	
	
endstate;


endfsm.
//******************************************************************



//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm barges : integer;


//------------------------------------------------------------------

// Generic_UnarmedConvoy:
//   Follows a path and but breaks off to run from enemies.

// NOTE: this script requires a CombatAI (or MechAI) to work properly!!!

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			fleeRange;			// At what range do I start running?
		static integer			withdrawRange;		// After I've started to flee, at what range can I forget about my enemy and return to the convoy?
		static integer			groupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			path;				// My path
		static integer			moveType;			// How I move along the path

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle

 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.
		static integer			mysound;
		static integer			myothersound;
		static integer			checktime;

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		fleeRange		= 500;
		withdrawRange	= fleeRange * 3 / 2;
		groupNumber		= 10;
		path			= epa_bargepath;
		moveType		= move_nocycle;
		formationType	= 2;
		formationDensity= formtype_sparse;
		mysound = eso_captured;
		myothersound = eso_recaptured;

		// driver settings
		piloting		= 50;
		gunnery			= 30;
		minDelay		= 1.5;
		maxDelay		= 3.0;
		eliteLevel		= 30;
		attackThrottle	= 80;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		
	switch (GetMemoryInteger(me,9))

		case 1:
		
		//mysound = eso_onesurr;
		checktime = 15;
		
		endcase;

		case 2:
		
		//mysound = eso_twosurr;
		checktime = 16;
		
		endcase;
		
		case 3:
		
		//mysound = eso_threesurr;
		checktime = 17;
		
		endcase;
		
		case 4:
				
		//mysound = eso_foursurr;
		checktime = 18;
		
		endcase;
		
		case 5:
		
		//mysound = eso_fivesurr;
		checktime = 19;
		
		endcase;
		
		case 6:
		
		//mysound = eso_sixsurr;
		checktime = 20;
		
		endcase;		
		
	endswitch;


endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		Settargetdesirability(me,-1);
				
		trans FollowPathState;

endstate;			

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
	
	if (isshot(me)) then
		fighting = true;
		convoyspeed = 32;
	endif;

	ordermoveto(path,convoyspeed,move_nocycle,true,true);

	if (iswithin(me,ena_Nav_Alpha,100)) then
		numescaped = numescaped+1;
		clearmoveorder(me);
		shutdown(me);
		teleporttohell(me);
		trans purewait;
	endif;
	
	//if (escortsdead) then
	//	if (iswithin(me,playermech,120)) then
	//		clearmoveorder(me);
	//		setalignment(me,friendly);
	//		playsoundonce(mysound);
	//		numcaptured = numcaptured +1;
	//		trans hangout;
	//	endif;
	//endif;

	if (timegreater(gti_timer_0,checktime)) then
		checktime = checktime + 6;
		if (iswithin(me,playermech,120)) then
			if (not (iswithin(me,(GroupObjectId(19)),120))) then
				clearmoveorder(me);
				setalignment(me,friendly);
				playsound(mysound);
				numcaptured = numcaptured +1;
				trans hangout;
			endif;
		endif;
	endif;
		
endstate;

state hangout;
	code
	
	if (timegreater(gti_timer_0,checktime)) then
		checktime = checktime + 6;
		if (iswithin(me,(GroupObjectId(19)),120)) then
			if (not (iswithin(me,playermech,120))) then
				ordermoveresumepatrol(path,convoyspeed,move_nocycle,true,true);
				setalignment(me,enemy);
				playsound(myothersound);
				numcaptured = numcaptured - 1;
				trans followpathstate;
			endif;
		endif;
	endif;	
	
endstate;

state purewait;
	code
	
endstate;


//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;
		
		numescaped = numescaped + 1; 	

		orderDie;

endstate;


endfsm.


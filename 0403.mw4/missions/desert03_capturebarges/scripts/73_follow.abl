
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm Follow : integer;


//------------------------------------------------------------------

// Generic_Patrol:
//   Follows a path.  If anything comes near, it goes off and attacks it,
//   and then comes back to the path when there's nothing left to attack.

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat entirely?

		static boolean			canLeavePath;		// Can I leave the path if attacked? (TRUE by default)

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
		static integer			findTypes;			// What kind of enemies to look for

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.
		static objectid			myunit;
		static integer			offset;
		static integer			deadnum;
		static boolean			starter;
		static integer			mygroup;
		static integer			mypath;
		static boolean			musicplayed;

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 650;
		withdrawRange	= attackrange * 3 / 2;
		canLeavePath	= false;
		musicplayed = true;
		
		// driver settings
		piloting		= 60;
		gunnery			= 68;
		minDelay		= 0.5;
		maxDelay		= 1.5;
		eliteLevel		= 78;
		attackThrottle	= 80;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		findTypes		= FT_DEFAULT;
		myunit =	-1;
		offset = -40;
		starter = false;
		mygroup = 17;
		
		switch (GetMemoryInteger(me,9))

		case 6:
		
		myunit = eve_barge6;
		offset = -40;
		deadnum = 4;
		mygroup	=	18;
		mypath = epa_rightpath;	
		musicplayed = false;	
		
		endcase;
		
		case 5:
		
		myunit = eve_barge5;
		offset = 40;
		deadnum = 0;
		mypath = epa_leftpath; 		
		
		endcase;
		
		case 2:
		
		myunit = eve_barge2;
		offset = -40;
		deadnum = 1;	
		mypath = epa_rightpath;		
		
		endcase;
		
		case 1:
		
		myunit = eve_barge1;
		offset = 40;
		deadnum = 2;
		mypath = epa_leftpath; 		
		
		endcase;
		
	endswitch;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);
				
		trans FollowPathState;

endstate;			

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(attackRange,findTypes)) then
			fighting = true;
			trans AttackState;
		endif;

		If (not isdead(myunit)) then
			if (ordermoveto(mypath,convoyspeed,move_nocycle,true,true)) then
				clearmoveorder(me);
				trans gettoplayer;
			endif;
		else
			clearmoveorder(me);
			trans gettoplayer;
		endif;
		
		if ((groupnumdead(groupobjectid(mygroup))) > deadnum) then
			 clearmoveorder(me);
			trans gettoplayer;
		endif;
		
endstate;

state gettoplayer;
	code
	
		canleavepath = true;

		if (FindEnemy(attackRange,findTypes)) then
			clearmoveorder(me);
			fighting = true;
			trans AttackState2;
		endif;

		ordermovetoobject(playermech,600);	
	
endstate;

//------------------------------------------------------------------
//	AttackState: attack my current target, or return to path if done
//------------------------------------------------------------------

state AttackState;
	code
	
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

		if (not musicplayed) then
			StartMusic("Music\t3loop",3.5,3.0,90);
			musicplayed = true;
		endif;
		
		if (((groupnumdead(groupobjectid(17))) > deadnum) or (isdead(myunit))) then
			 orderstopattacking;
			 SetTarget(ME,NO_UNIT);
			trans gettoplayer;
		endif;

		OrderAttack(canLeavePath);

endstate;


state AttackState2;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans gettoplayer;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttack(canLeavePath);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.


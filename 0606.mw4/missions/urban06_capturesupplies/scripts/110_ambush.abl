
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm Ambush111 : integer;


//------------------------------------------------------------------

// Generic_Patrol:
//   Follows a path.  If anything comes near, it goes off and attacks it,
//   and then comes back to the path when there's nothing left to attack.

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat entirely?

	 	static integer			moveType;			// How I move along the path
		static boolean			canLeavePath;		// Can I leave the path if attacked? (TRUE by default)

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
		static integer			findTypes;			// What kind of enemies to look for

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.
		static integer			speed;				// The speed at which I move along the path

		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
		
//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 500;
		withdrawRange	= attackrange * 3 / 2;
		moveType		= move_seesaw;
		canLeavePath	= true;
		speed			= 50;
		takeOffDistance	= 150;

switch (GetMemoryInteger(me,9))

	case 0:

		// driver settings
		piloting		= 85;
		gunnery			= 60;
		minDelay		= 0.0;
		maxDelay		= 0.0;
		eliteLevel		= 80;
		attackThrottle	= 80;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= Neutral_START;
		findTypes		= FT_DEFAULT;
	endcase;

	case 1:

		// driver settings
		piloting		= 85;
		gunnery			= 60;
		minDelay		= 0.0;
		maxDelay		= 0.0;
		eliteLevel		= 80;
		attackThrottle	= 80;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= Neutral_START;
		findTypes		= FT_DEFAULT;
	endcase;

	
	
	
endswitch;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);
		SetTargetDesirability(me,-1);
		trans Wait;
		

endstate;			

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------
state Wait;
	
	code
		switch (GetMemoryInteger(me,9))
		
		Case 1:
			if FIRE == true then
				setTarget(me,playermech);
				trans Ambush;
			endif;
		endcase;
		
		endswitch;

	if timegreater(20,6) then
		minDelay		= 0.5;
		maxDelay		= 1.0;
		SetTargetDesirability(me,50);
		KillTimer(20);
		Trans Rumble;
	endif;

endstate;


state Rumble;	
	code
	
	if (FindEnemy(attackRange,findTypes)) then
		trans AttackState;
	endif;

	
endstate;

state Ambush;

	code

 //	
 OrderAttack(true);	
	
	if timegreater(20,6) then
		minDelay		= 1.0;
		maxDelay		= 3.0;
		SetTargetDesirability(me,50);
		KillTimer(20);
		Trans AttackState;
	endif;
  	
endstate;


//------------------------------------------------------------------
//	AttackState: attack my current target, or return to path if done
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans Wait;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttackTactic(Tactic_HIT_AND_RUN,canLeavePath);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.



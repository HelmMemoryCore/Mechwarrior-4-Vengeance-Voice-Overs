
//*********************************************************************************
//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Patrol must be changed to some other unique identifier
fsm GenericPatrols : integer;

//This unit patrols a specific path and attacks anything that comes near it.
//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer			attackrange; // When do I start shooting?
																
	static integer			piloting; 	// piloting skill
	static integer			gunnery; // hit chance,
	static real					mindelay;		//minimum amount of time I will wait between shots once a weapon is reloaded
	static real					maxdelay;		//maximum amount of time I will wait between shots once a weapon is reloaded
	static integer 			speed;			 // What speed so I move at?
	static integer 			elitelevel; // % elite chance, This helps determine tactics, defensive manuevers, opportunity fire
																	// and other things that would normally be determined by combat experience

 	static integer			isshotradius;	//how far away from me will I detect an enemy shot.
	static integer			movetype;		//how will it move down the path?

	static Boolean 			attacksoundplayed;
	static integer 			attacksound; // plays when it first attacks
	static integer 			deathsound; // plays when it dies
	
	static integer			mood;	//What is my normal mood?
	
	static Boolean			reachedendofpath;	//Have I gotten to the end of the path?
																			//Note: This only gets set if movetype is set to move_nocycle.
	static integer			path;		 //what path am I following?
	static Boolean 			attackersdistractit;	// if FALSE, it won't leave the path, even when things
		// are shooting it. It will shoot back. Defaults to true
// Once unit reaches the end of the path, of course, it attacks freely.

	static boolean			inbase;
	static boolean			outer;
	static integer			mytactic;
	
//------------------------------------------------------------------
//
//     Local Functions
//
//------------------------------------------------------------------

function init;
	code
	
																					// defaults are below
	//These are the variables that are normally changed by the designer
	//in order to change behavior
	attackrange = 700;											// 500
	piloting = 70;														//50
	gunnery = 83;												//30
	mindelay = 0.1;													//1.5
	maxdelay = 0.3;													//3.0
	elitelevel = 80;												//30
	speed = 600;														//600 (max speed)	
	isshotradius = 80;												//80 	
	attacksound = -1;                   //-1 (no sound)
	deathsound = -1;                    //-1 (no sound)
	path = -1;													 //-1 (no path)
	movetype = move_circle;									//move_circle
	attackersdistractit = TRUE;					 //true
	mood = neutral_start;								//neutral_start
			
 	//These variables should not be changed by the designer without good reason
	reachedendofpath = FALSE;						 //false
	attacksoundplayed = FALSE;									//false
	inbase = false;
	outer = false;
	mytactic = TACTIC_PICK_BEST;
	
	//Use this to set different values for different units using the same brain	
	switch (GetMemoryInteger(me,9))

		case 1:
		
		attackrange = 575;				
 					
		speed = 600;							 	
		isshotradius = 80;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_frontsteppath;
		movetype = move_seesaw;
		attackersdistractit = TRUE;
		mood = neutral_start;
		inbase = true;
		
		endcase;
		
		case 2:
		
		attackrange = 600;				
 					
		speed = 45;							 	
		isshotradius = 80;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_assaultpatrolpath;
		movetype = move_nocycle;
		attackersdistractit = TRUE;
		mood = neutral_start;
		inbase = true;
		outer = true;
		
		endcase;
		
		case 3:
		
		attackrange = 600;				
 				
		speed = 50;							 	
		isshotradius = 80;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_barracks1path;
		movetype = move_circle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		inbase = true;
		
		endcase;
		
		case 4:
		
		attackrange = 600;				
						
		speed = 60;							 	
		isshotradius = 40;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_centralpath;
		movetype = move_circle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		inbase = true;
		
		endcase;
		
		case 5:
		
		attackrange = 600;				
		piloting = 20;							
		gunnery = 30;						
		mindelay = 1.0;							
		maxdelay = 2.0;									
		elitelevel = 75;						
		speed = 60;							 	
		isshotradius = 40;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_assaultbasepath;
		movetype = move_circle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		inbase = true;
		
		endcase;

		case 6:
		
		attackrange = 550;				
		piloting = 80;							
		gunnery = 40;						
		mindelay = 0.5;							
		maxdelay = 1.0;									
		elitelevel = 75;						
		speed = 600;							 	
		isshotradius = 40;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_barrackspath;
		movetype = move_circle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		inbase = true;
		
		endcase;
		
	endswitch;

	
endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,true);
		setisshotradius(me,isshotradius);
		setentropymood(me,mood);
		setcurmood(me,mood);
		setskilllevel(me,piloting,gunnery,elitelevel);
		//setsearchlight(me,on);
		//startexecute(me);
		//setalignment(me,enemy);
				
		trans patrol;
endstate;			

state deadState;
  code
		if (deathsound <> -1) then	
			PlaySoundOnce(deathsound);
		endif;
		
		if (inbase) then
			baseunderattack = true;
		endif;		
						
		orderDie;
endstate;

	state patrol;

		code

			if (outer) then
				if (baseunderattack) then
					trans home;
				endif;
			endif;


					if ((orderMoveto(path,speed,movetype,true,true)) == TRUE) then
						clearmoveorder(me);
						trans moveinbase;
					endif;
						
		//Find me a target
		if (setmytarget(attackrange)) then
			if (inbase) then
				baseunderattack = true;
			endif;
			trans attack;
	 	endif;
			
	endstate;
	
	state moveinbase;
  code

 		if (setmytarget(attackrange)) then
			trans attack;
	 	endif;
		
		orderMoveto(epa_assaultbasepath,speed,move_circle,true,true);
								
	endstate;
	
	state home;
  code

 		if (setmytarget(attackrange)) then
			trans attack;
	 	endif;
		
		ordermovetoobject(playermech,600);
						
	endstate;	

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
	state attack;
	
		
		code

			
		if (LeaveAttackState(attackrange*3/2)) then
			orderstopattacking;
			orderMoveResumePatrol(path,speed,movetype,true,true);
			trans home;
		endif;
		
		//the ever popular attack order
    orderAttacktactic (mytactic,attackersdistractit);
		
		//maybe swap targets when I am shot.
		if ((isShot (me)) and (rand(0,75) <= 1)) then
  		setTarget(me,whoShot(me));
		endif;
 			
					
	endstate;


endfsm.
//******************************************************************


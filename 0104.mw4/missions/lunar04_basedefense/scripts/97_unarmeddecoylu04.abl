
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!

fsm UnarmedDecoyLU04 : integer;


//------------------------------------------------------------------

// Generic_UnarmedConvoy:
//   Follows a path and but breaks off to run from enemies.

// NOTE: this script requires a CombatAI (or MechAI) to work properly!!!

//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			fleeRange;			// At what range do I start running?
		static integer			withdrawRange;		// After I've started to flee, at what range can I forget about my enemy and return to the convoy?
		static integer			groupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			speed;				// The speed at which I move along the path
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			path;				// My path
		static integer			moveType;			// How I move along the path
		static integer			fleeSpeed;			// How fast I flee

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle

 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		fleeRange		= 200;
		withdrawRange	= fleeRange * 3 / 2;
		groupNumber		= 0;
		path			= -1;
		moveType		= move_nocycle;
		speed			= 40;
		formationType	= 1;
		formationDensity= formtype_sparse;
		fleeSpeed		= 600;

		// driver settings
		piloting		= 200;
		gunnery			= 30;
		minDelay		= 1.5;
		maxDelay		= 3.0;
		eliteLevel		= 30;
		attackThrottle	= 80;
		isShotRadius	= 10;							//was 120
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay					(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire		(ME,true);
		SetIsShotRadius		 			(ME,isShotRadius);
		SetEntropyMood					(ME,mood);
		SetCurMood							(ME,mood);
		SetSkillLevel						(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle				(ME,attackThrottle);
		
		trans Wait4WorkState;		

endstate;			

state WorkDoneState;
	code

 shutdown(me);

 endstate;

state Wait4WorkState;
	code
	Switch (GetMemoryInteger(me,9))
	
		case 4:
			If LoadingStart == true then
				path = epa_APU1Path;
				trans LoadingDoneState;
			endif;
		endcase;
		
	
		case 5:
		
			//If (LoadingStart == true) then
				 path = epa_APU2Path;
				 trans LoadingDoneState;
			//endif;
		endcase;
		
	
//		case 6:
//			If (LoadingStart == true) then
//				trans LoadingDoneState;
//			endif;
//		endcase;
		
	
		case 9:
			If LoadingStart == true then
				path = epa_LoaderPath;
				trans LoadingDoneState;
			endif;
		endcase;
		
		case 1:
			If (EndingStart == true) then
				path = epa_OB_APU1Path;
				trans MissionDoneState;
			endif;
		endcase;	
	
		
		case 2:
			If (EndingStart == true) then
				path = epa_OB_APU2Path;
				trans MissionDoneState;
			endif;
		endcase;	
	
		
		case 3:
			If (EndingStart == true) then
				path = epa_North1Path;
				trans MissionDoneState;
			endif;
		endcase;	
	
	endswitch;
	

endstate;

//------------------------------------------------------------------
//	Loading Done
//------------------------------------------------------------------

state LoadingDoneState;
	code

		if (path <> -1) then
			if OrderMoveTo(path,speed,movetype,true,false) then   //== true)
				trans WorkDoneState;
			endif;
		else
			trans WorkDoneState;
		endif;

endstate;

//------------------------------------------------------------------
//	Mission Done
//------------------------------------------------------------------

state MissionDoneState;
	code
	
		if (path <> -1) then
			if (OrderMoveTo(path,speed,movetype,true,false) == true) then
				trans WorkDoneState;
			endif;
		else
			trans WorkDoneState;
		endif;

endstate;
//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(fleeRange,FT_DEFAULT)) then
			trans FleeState;
		endif;

		if (path <> -1) then
			OrderFormationMove((groupobjectid(groupNumber)),path,speed,moveType,formationType,formationDensity,false);
		else
			OrderMoveLookOut;
		endif;
endstate;

//------------------------------------------------------------------
//	FleeState: run away from my target
//------------------------------------------------------------------

state FleeState;
	code
		SetGlobalTrigger(10,true);
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

		OrderMoveFlee(GetTarget(ME),fleeSpeed);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code

		SetGlobalTrigger(10,true);
		
		orderDie;

endstate;


endfsm.


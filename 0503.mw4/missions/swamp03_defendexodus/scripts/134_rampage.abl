
//*********************************************************************************
fsm RampageScript : integer;

//This unit patrols a specific path and attacks anything that comes near it.
//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer			attackrange; // When do I start shooting?
																
	static integer			piloting; 	// piloting skill
	static integer			gunnery; // hit chance,
	static real					mindelay;		//minimum amount of time I will wait between shots once a weapon is reloaded
	static real					maxdelay;		//maximum amount of time I will wait between shots once a weapon is reloaded
	static integer 			speed;			 // What speed so I move at?
	static integer 			elitelevel; // % elite chance, This helps determine tactics, defensive manuevers, opportunity fire
																	// and other things that would normally be determined by combat experience

 	static integer			isshotradius;	//how far away from me will I detect an enemy shot.
	static integer			movetype;		//how will it move down the path?

	static Boolean 			attacksoundplayed;
	static integer 			attacksound; // plays when it first attacks
	static integer 			deathsound; // plays when it dies
	
	static integer			mood;	//What is my normal mood?
	
	static Boolean			reachedendofpath;	//Have I gotten to the end of the path?
																			//Note: This only gets set if movetype is set to move_nocycle.
	static integer			path;		 //what path am I following?
	static Boolean 			attackersdistractit;	// if FALSE, it won't leave the path, even when things
		// are shooting it. It will shoot back. Defaults to true
// Once unit reaches the end of the path, of course, it attacks freely.
	static integer			path1;
	static integer			path2;
//------------------------------------------------------------------
//
//     Local Functions
//
//------------------------------------------------------------------

function init;
	code
	
																					// defaults are below
	//These are the variables that are normally changed by the designer
	//in order to change behavior
//	attackrange = 500;											// 500
//	piloting = 50;														//50
//	gunnery = 30;												//30
//	mindelay = 1.5;													//1.5
//	maxdelay = 3.0;													//3.0
//	elitelevel = 30;												//30
//	speed = 600;														//600 (max speed)	
//	isshotradius = 80;												//80 	
//	attacksound = -1;                   //-1 (no sound)
//	deathsound = -1;                    //-1 (no sound)
//	path = -1;													 //-1 (no path)
//	movetype = move_circle;									//move_circle
//	attackersdistractit = TRUE;					 //true
//	mood = neutral_start;								//neutral_start
			
 	//These variables should not be changed by the designer without good reason
	reachedendofpath = FALSE;						 //false
	attacksoundplayed = FALSE;									//false

	
	//Use this to set different values for different units using the same brain	
	switch (GetMemoryInteger(me,9))

		case 0:
		
		attackrange = 500;				
		piloting = 75;							
		gunnery = 90;						
		mindelay = 0.5;							
		maxdelay = 1.0;									
		elitelevel = 84;						
		speed = 600;							 	
		isshotradius = 80;						 	
		attacksound = -1;
		deathsound = -1;
		path = epa_RampagePath1;
		path1 = epa_RampagePath1;
		path2 = epa_RampagePath2;
		movetype = move_nocycle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		
		endcase;
		
		case 1:
		
		attackrange = 500;				
		piloting = 75;							
		gunnery = 90;						
		mindelay = 0.5;							
		maxdelay = 1.0;									
		elitelevel = 90;						
		speed = 600;							 	
		isshotradius = 80;						 	
		attacksound = -1;
		deathsound = -1;
		path =	epa_RampagePath1;
		path1 = epa_RampagePath1;
		path2 = epa_RampagePath2;
		movetype = move_nocycle;
		attackersdistractit = TRUE;
		mood = agressive_start;
		
		endcase;

	
	
	endswitch;

	
endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,true);
		setisshotradius(me,isshotradius);
		setentropymood(me,mood);
		setcurmood(me,mood);
		setskilllevel(me,piloting,gunnery,elitelevel);
		//setsearchlight(me,on);
		//startexecute(me);
		//setalignment(me,enemy);
		
		if rand(0,3) > 1 then
			path = path1;
		else
			path = path2;
		endif;
		
		
				
		trans wait;
endstate;			

state deadState;
  code
		if (deathsound <> -1) then	
			PlaySoundOnce(deathsound);
		endif;		
						
		orderDie;
endstate;

	state wait;
		code
			if iswithin(me,playermech,1500) then
				trans	patrol;
			endif;
						
		if (FindEnemy(attackRange,FT_DEFAULT)) then
			trans Attack;
		endif;	
		
	endstate;
	
	state patrol;

  var
    ObjectID foe;

		code

	//head down the path.  If this has already been done
	// or if there is no path set then look around.
			if ((path <> -1) and (reachedendofpath == FALSE)) then
					if ((orderMoveto(path,speed,movetype,true,true)) == TRUE) then
						reachedendofpath = TRUE;
					endif; 			
			else	 		 		
				ordermovelookout;			
			endif;
			
		//Find me a target
		if (FindEnemy(attackRange,FT_BUILDING + FT_UNARMED + FT_DEFAULT)) then
			trans Attack;
		endif;	
					
	endstate;

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
	state attack;
	
		
		code

			
		if (LeaveAttackState(attackrange*3/2)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans Patrol;
		endif;

		OrderAttack(true); 			
					
	endstate;


endfsm.
//******************************************************************


